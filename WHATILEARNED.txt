(2022.07.15)깃허브 배운 것 정리
# 깃허브 사용
git init
> 새 폴더에서 깃허브 사용 지정(master)
git status
> 깃 상태 확인
git config --global --list
> 깃 사용자 정보 확인
git config --global --unset user.email
git config --global --unset user.name
> 깃 사용자 정보 제거
git config --global user.email "이메일"
git config --global user.name "이름"
> 깃 사용자 정보 등록
> 기기가 변경됬다면 자격증명관리자에서 깃허브 정보 제거할 것
git config --global --list
git add a.txt
> 깃 스테이징
git commit -m 'root commit'
> 깃 커밋
git status
git log
> 커밋 로그 확인
git log --oneline
> 커밋 로그 확인 ( 한줄로 )
git checkout 해쉬값
> 해당 커밋까지 버전 보기
git checkout master
> 원래 버전으로 돌아오기
git remote -v
> 현재 커밋 버전 확인
git remote 주소
> 해당 주소의 깃허브에 연결
git push origin master
> 로컬에서 대기중인 커밋을 깃허브로 등록
git clone 주소
> 깃허브 레포지토리를 로컬에 폴더로 가져오기(복사)
git pull origin master
> 깃허브에 갱신된 커밋을 로컬로 가져와 반영하기
touch .gitignore
> 깃 추적을 회피할 파일 명시할 파일
> write file direction
> gitignore.io
.gitkeep
> 형태 유지를 위한 빈 폴더 만드는 방법
> empty folder remain for skeleton
(2022.07.16) 휴식
(2022.07.17) D2 문제 3개를 추가로 품
(2022.07.18)
Alt+Click : 다중커서 활성화
Ctrl D : 단어 드래그하고 쓰면 동일단어 다 드래그
Alt+Shift+under↓ : 지금 줄 밑으로 복사
Ctrl / : 주석전환
f스트링 쓰는 법
f'{변수이름:변수형식'}
f'{변수이름}'
(2022.07.19)
{} set() dict()
[] list()
() tuple()
'''
a=[[1,2],[3,4]]
b=a[:]
a[0][0]=99
print(b)
'''
> [[99,2],[3,4]]
2-demension list에서 외곽만 복사되고 내부는 포인터가 복사되어 가리키는 위치는 같음
(2022.07.20)
value = num if num >= 0 else -num
> value는 num의 절대값
datas = dict(hi=30,bye=60)
for data in datas:
    print(data) # hi \n bye
> dictonary의 키를 호출
for idx, data in enumerate(datas, [start=0]):
    print(idx, data) # 0 hi \n 0 bye
> 인덱스를 자동으로 뽑아줌
> 생략가능한 내장인수 start로 시작값 지정 가능
### List Comprehension
[code for variable in iterable [if conf]]
> 리스트 생성
[number+1 for number in range(1,4)] # [2, 3, 4]
### Dictionary Comprehension
{key: val for variable in iterable [if conf]]
> 딕셔너리 생성
{num: num*3 for num in range(1,4)} # {1: 3, 2: 6, 3: 9}
pass
여백 대신 사용하는 키워드
### function
정의 : def func_name(parameters):
return 으로 두 개 이상의 값을 받을 땐 튜플로
parameter를 여러 개(정확한 갯수 모름) 받고 싶으면 앞에 *붙이기
*parameter 는 받아진 인자를 요소로 하는 tuple 객체로 인식
def asdf(*args): print(args)
asdf(1,2,3,4) # (1, 2, 3, 4)
> 이를 패킹이라고 하고 반대의 경우는 언패킹
a = 'string'
b, *c, d = a
print(b, c, d) # s ['t', 'r', 'i', 'n'] g
> 이렇게 할당 외 요소를 *을 사용하여 하나로 묶을 수 있음
def asdf(**args): print(args)
asdf(hi='hello', bye='hell') # {'hi': 'hello', 'bye': 'hell'}
> **를 붙이면 dictionary취급, 이와 같이 dict()을 쓴거 같이 사용함
> 간단하게 key와 value를 같이 넣는다는 소리
def asdf(*args **argss):
> 이같이 둘 다 쓸 수 있음. argss에 해당하는 부분은 key=value쌍부터 인식
global
> 전역변수를 지역에서 쓰려면 앞에 global을 붙여야함 없으면 syntax error
> 이전에 선언된 적이 없는데 밖에서도 선언된 상태로 쓰고싶을때도 씀
nonlocal
> global이 아닌 현재 로컬 바로 바깥의 변수를 쓸 때 사용함.
> 이전에 선언된 적이 없으면 못 씀
위 두개는 가급적 사용을 지양해야함.. goto같은것들
map
> map(int,input())에서 봤듯, 오른쪽 인자에 int를 적용하여 객체로 반환
> 이 때, 객체는 map클래스임
filter
> filter(odd,nums) map과 비슷하지만 결과가 True가 되는 것만 객체로 반환
> 이 때, 객체는 filter클래스임
zip
> zip(*args) 이며, 복수의 인자들을 받아 해당 인자들을 각각 tuple상태로 모음.
lambda
a = lambda b, c : b+c
print(a(1,2)) # 3
> 간단한 함수 정의는 lambda로 가능, 이름 정의 할 필요가 없음
function 함수 여러 개가 모인 파일 : module
> .py 단위로 구분됨
> import module
> from module import function, var, Class
module 파일 여러 개가 모인 폴더 : package
> from package import module
> from package.module import function, var, Class
package 폴더 여러 개가 모인 묶음 : library
library의 root : pip
$ pip install SomePackage
$ pip uninstall SomePackage
> 어떤 패키지를 설치/삭제하는 방법
$ pip list
$ pip show SomePackage
> 패키지 목록이나 특정 패키지 정보를 보는 방법
모든 폴더에 __init__.py를 만들어 패키지로 인식시킬 수 있음(권장)
$ python -m venv FOLDERNAME
$ deactivate
> 별도의 가상 환경 생성/비활성화(파이썬 기본라이브러리 외 독립적인 공간)
$ source venv/Scripts/activate
> 가상 환경 활성화
(2022.07.21)
pip freeze
> 현재 가상 환경을 key==value로 복사하기 쉽게 정리해줌
pip freeze > requirement.txt
> 정리한걸 requirement.txt 에 내보내줌
pip install -r requirement.txt
> 정리된 내용 토대로 가상환경 설치
(2022.07.22)
dict comprehension
> {key: val for key, val in enumerate(datas)}
(2022.07.23) D2 문제 5개 품
(2022.07.24) D3 문제 5개 품
(2022.07.25) D3 문제 5개 품
(2022.07.26)
'a = dict(zip(range(1,4),[0]*3)'
'{1: 0, 2: 0, 3: 0}'
> zip 사용 방법
`for r in range(1,3):`
`    for c in range(r):`
`        a[r][c],a[c][r] = a[c][r],a[r][c]`
> 정방전치행렬
`list(map(list,zip(*a)))` ####################################################### 짚
> 전치행렬 튜플해결책
바꿀 수 없는건 global로 불러서 해결될 수도 있음
global : 전역변수 선언, 가져오기 둘 다 가능
`set(set(a))`
> 요소는 그대로, id 세탁
(2022.07.27) D3 문제 2개 품
PYTHON OOP
> 모든 것은 객체이자 모든 객체는 특정 타입의 인스턴스
> __str(self)__ : toString()
> __del(self)__ : 단말마
> __init(self, other)__ : 생성자
기타 등등
`@classmethod`
`def cmth(cls)`
> 클래스 메소드
`@function_name`
`def targetmth()`
> 데코레이터 사용 시
`def setmth(original)`
`    def wrapper():`
`        pass`
`    return wrapper`
> 데코레이터 정의 시
`@staticmethod`
> 스태틱 메소드 no cls, no self
PYTHONIC NAMESPACE
> 가장 가까운 것부터 찾는다
`super()`
> 상속시 부모 호출방법
주의 : 오버로딩 없음 우리에겐 가변인자가 있음...
`__variable = 1`
> private member 선언할 때 언더바 두개
`@property`
`def var_name(self)`
> getter
`var_name.setter`
`def var_name(self, new_var)`
> setter
(2022.07.28) D3 12개 품
class docstring
> class 밑에 '''써서 기입하는 class 안내문
> help(class_name)으로 docstring을 호출할 수 있음
!! 인스턴스 생성은 __init__이 실행되어야만 가능
> 메소드 오버라이딩 : 함수를 이름만 가지고 다시 쓰는것 python O
> 메소드 오버로딩 : 클래스 내에 다른 내용의 함수를 쓰는 것 python X
(2022.07.29) ############################################################# API
사용한 api 문서 : https://developers.themoviedb.org/3
사용한 api 주소 : https://api.themoviedb.org/3
사용한 모듈 : requests
URL = 주소
params = {
'key1': 'val1',
'key2': 'val2',
'key3': 'val3'
}
api 받는 방법 : request.get(URL, params=params).json()
나머지는 JSON 지지고 볶기
(2022.07.30) D3 2개 품
(2022.07.31) D3 2개 품
(2022.08.01) D3 1개 품
(2022.08.02)
1. 확장
> live server + open in browser 골라서..
> live browser 골라서..
> reset.css : 브라우저 베이스 css 날리기 위한 것.
2. IDE
> ! + tab : html 기본 페이지
> 태그이름 + tab : 태그 기본 세팅
> 태그이름*n + enter : 태그 n개 세팅
> 태그이름.클래스이름*n + enter : 클래스인 태그 n개 세팅
> 태그이름 + mdn  : 태그 백과사전
> <marquee> : 슬라이딩 태그
background-size: contain
background-repeat: no repeat
css는 css파일 가장 밑부터 우선
(2022.08.03) 
(2022.08.04) 
package.json
(2022.08.05) 
(2022.08.06) 
(2022.08.07) 시험공부
(2022.08.08) D3문제 4개 품
(2022.08.09) 
(2022.08.10)
(2022.08.11)
SWEA 거미
법선은 디터미넌트 PQR
법선과 r-r0 각각의 원소를 product할때 0이면 수직
ax ay az
bx by bz
cx cy cz
bx-ax by-ay bz-az
cx-bx cy-by cz-bz
(by-ay * cz-bz - bz-az * cy-by)*dx-ax+
(bx-ax * cz-bz - bz-az * cx-bx)*dy-ay+
(bx-ax * cy-by - by-ay * cx-bx)*dz-az
dx dy dz
(2022.08.12)
거미 푸는중 25까지 클리어
(2022.08.13)
거미 클리어~
(2022.08.14)
(2022.08.15)
(2022.08.16)
(2022.08.17)
(2022.08.18)
집가서 해야할거 끝
(2022.08.19)
(2022.08.20)
(2022.08.21)
(2022.08.22)
(2022.08.23)
(2022.08.24)
(2022.08.25)
(2022.08.26)
(2022.08.27)
(2022.08.28)
(2022.08.29)
(2022.08.30) Django

 - 가상환경 설정
$ py -m venv venv

 - 가상환경 활성화
$ source venv/Source/activate

 - 장고설치
$ pip install django==3.2.13

 - 가상환경 버전 내보내기
$ pip freeze > requirements.txt

 - 가상환경 버전 내보낸거 설치하기
$ pip install -r requirements.txt

 - 현재위치에 projectname 프로젝트 설치
$ django-admin startproject projectname .

 - 서버 시작~
$ py manage.py runserver

 - appname 앱 설치~
$ py manage.py startapp appname

 - 앱 설치 후 필수 세팅
(settings.py)
INSTALLED_APPS = [
	'appname',
	...
]

 - Templates skeleton 사용법
(base.html) 평범한 html 문서
<body>
	{% block content %}
	{% endblock content %}
</body>
(index.html) extends로 base.html을 땡겨와서 블록 부분만 새로 작성
{% extends 'base.html' %} → 문자 그대로 맨 위, 1번째 줄에 있어야함
{% block content %}
	<h1>hello world!</h1>
{% endblock content %}

 - skeleton을 최상위 templates에 두고 가져오려면
(settings.py)
TEMPLATES = [
	{
		...
		'DIRS': [BASE_DIR / 'templates',],
		...
	},
]

 - Variable Routing URL 변수 사용하기
(urls.py)
urlpatterns = [
	path('app/<variable>/', views.func),
]
(views.py)
def func(request, variable):
	context = {
		'var': variable,
	}
	return render(request, 'index.html', context)
(index.html)
<h1>{{ var }} is variable</h1>

 - GET 보낸 데이터는 어떻게 받나?
request.GET.get('key')

 - URL 하드코딩 하기 싫으면?
(urls.py)
path('app/<variable>/', views.func, name='vals'),
(test.html)
<form action="{% url 'vals' %}" method="GET">

 - url 앱별 관리 하고 싶으면?
(pjt urls.py)
urlpatterns = [
	...
	path('newapp/', include('newapp.urls'))
]
(newapp urls.py) 해당 path는 /newapp/newpage/임
urlpatterns = [
	path('newpage/', views.func),
]
(2022.08.31)
(2022.09.01)
(2022.09.02)
(2022.09.03)
알고 풀어놓고 안올려서 잔디 끊겼다...ㅠ
(2022.09.04)
(2022.09.05)
(2022.09.06)

 - Import "django.contrib" could not be resolved from source 오류가 나면
vscode 하단부 파이썬 인터프리터 설정이 글로벌로 되어있는 것을 venv로 바꾸기
현재 장고가 돌아가는 가상환경과 글로벌 장고의 버전이 달라서 발생

 - django form에서 attribute 값 얻는 방법
form['title'].value()

 - html문서에서 폼을 쪼개는 법 ( form.as_p 대신)
1. 직접 쪼개기
{{ form.var.errors }}
{{ form.var.label_tag }}
{{ form.var }}
세 가지는 갖고 있어야함
2. 포문으로 쪼개기
{% for field in form %}
{{ field.errors }}
{{ field.label_tag }}
{{ field }}
{% endfor %}

- django bootstrap 5 외부 라이브러리 폼 사용 가능
(2022.09.07)
(2022.09.08)
(2022.09.09)
(2022.09.10)
이 고장난 배치파일 고치기
(2022.09.11)
(2022.09.12)
(2022.09.13)
(2022.09.14)
(2022.09.15)
(2022.09.16)
(2022.09.17)
(2022.09.18)
(2022.09.19)
(2022.09.20)
(2022.09.21)
(2022.09.22)
(2022.09.23)
(2022.09.24)
(2022.09.25)
(2022.09.26)
(2022.09.27)
(2022.09.28)
(2022.09.29)
def dij(G, r):
    D = [inf]*N
    P = [None]*N
    visited = [False]*N
    D[r] = 0
    for _ in range(N):
        minidx = -1
        min = inf
        for i in range(N):
            if not visited[i] and D[i] < min:
                min = D[i]
                minidx = i
        visited[minidx] = True
        for v, val in G[minidx]:
            if not visited[v] and D[minidx]+val < D[v]:
                D[v] = D[minidx] + val
	    P[v] = minidx

def kruskal(G):
    mst = []
    for i in range(N):
        Make_Set(i)
    G.sort(key=lambda x:x[2])
    mst_cost = 0
    while len(mst) < N-1:
        u, v, val = G.pop(0)
        if Find_Set(u) != Find_Set(v):
            Union(u, v)
            mst.append((u, v))
            mst_cost += val

def prim(G, s):
    key = [INF]*N
    pi = [None]*N
    visited = [False]*N
    key[s] = 0
    for _ in range(N):
        minidx = -1
        min = inf
        for i in range(N):
            if not visited[i] and key[i] < min:
                min = key[i]
                minidx = i
        visited[minidx] = True
        for v, val in G[minidx]:
            if not visited[v] and val < key[v]:
                key[v] = val
                pi[v] = minidx
(2022.09.30)
(2022.10.01)
(2022.10.02)
(2022.10.03)
(2022.10.04)
(2022.10.05)
(2022.10.06)
(2022.10.07)
git log --oneline --graph
> 깃의 브랜치 내역 그려줌
git branch
> 내가 있는 브랜치 위치 알려줌
git branch xxx
> xxx브랜치를 분기함
git branch -d xxx
> 병합 이후 버릴 때
git branch -D xxx
> 병합 하기 전에 버릴 때(강제삭제)
git checkout hashval
> hashval 커밋한 내역까지 잠시 돌아감
git switch xxx
> xxx 브랜치로 감. master면 master브랜치로 감
git switch -c xxx
> xxx 브랜치로 가는데 없으면 생성해서 감
git merge xxx
> xxx 브랜치와 현재 브랜치를 병합함

BRANCH CYCLE MODEL
- Hub Master (PUSH X)
- Hub Branch
- Local Master (PULL ONLY)
- Local Branch
HM -> LM (PULL)
LM -> LB (BRANCH)
LB -> LB (COMMIT)
LB -> HB (PUSH)
HB -> HM (MERGE)

git remote -v
> 허브와 연결이 잘 되었는지 확인
(2022.10.08)
(2022.10.09)
(2022.10.10)
(2022.10.11)
(2022.10.12)
(2022.10.13)
(2022.10.14)
(2022.10.15)
(2022.10.16)
(2022.10.17)
(2022.10.18)
(2022.10.19)
(2022.10.20) js
a = 3
var b = 3

Object.getOwnPropertyDescriptor(this, 'a')
// { value: 6, ... configurable: true }
Object.getOwnPropertyDescriptor(this, 'b')
// { value: 6, ... configurable: false }

delete a // true
delete b // false

a는 '할당'된 '프로퍼티'이고
b는 '선언'된 '변수'임

delete는 선언된 것은 지울 수 없고 프로퍼티만 지울 수 있음

js는 객체지향이고 인터프리터가 아니기 때문에 선언한다면 객체 안에서 언제든 사용이 가능하나 프로퍼티는 선언해야 사용이 가능함

js Array Method
 - 뒤에서 동작
push : same
pop : same
 - 앞에서 동작
unshift : push // arr.length
shift : pop
 - 기타
includes : a in arr
indexOf : find
join : arr.join('') // same

js object Method
넣을 때 key 이름 == value 이름 이라면
{ key, } // { key: value, } 가
역으로도 가능함

name = 'hooly'
const dooly = {
  name: 'dooly',
  greeting1: () => console.log(this.name),
  greeting2: function () { console.log(this.name) },
  greeting3 () { console.log(this.name) },
}
greeting1 : hooly
greeting2 : dooly
greeting3 : dooly

const key = 'hello'
const myobject = { [key]: 1 }
myobject.hello

arr.slice(startval, endval)
arr[startval:endval] // same
arr.splice(startval, [deletecount])
arr[startval:] // arr = arr[:startval]
arr = Array.from(Array(10).keys(), x=>x+1)
arr = Array.from(Array(10), (_,x)=>x+1)
> 1~10 인 배열 [1,2,3,4,5,6,7,8,9,10]
arr = Array.from({length:10}, function(v, k) {return k})
> 0~9 인 배열 [0,1,2,3,4,5,6,7,8,9]
(2022.10.21)
(2022.10.22)
그냥... 약속가서 끊김
(2022.10.23)
(2022.10.24)
(2022.10.25)
(2022.10.26)
(2022.10.27)
js토이프로젝트 - gh캘린더
서브태스크1 - 달력 모양
서브태스크2 - 달력 안에 데이터 넣기
서브태스크3 - 달력 안에 깃허브 데이터 넣기
+)서브태스크4 - 달력 안에 깃허브 데이터 시각화까지 해서 만들기
++)서브태스크5 - 깃허브 api로 만든 페이지
금일 토이프로젝트 도구검색 결과
1. 데이터 가져오기
포스트맨 확인하세요 https://raw.githubusercontent.com/potato3641/algo/master/input.txt
input.txt의 그냥 생짜 content
2. JSON 가져오기
포스트맨 확인하세요 https://api.github.com/repos/potato3641/algo/contents/BOJ
BOJ폴더의 JSON데이터
!!!밀린 정리해야 할 것 : django ws 5,6 전반적으로!!!--하고나서 지울 것
추가 정보) 스터디 참석률 계산하는거 정리됨
https://jjunbbang.tistory.com/32
(2022.10.28)
3. 파이썬 파일의 수량을 세는 방법
https://api.github.com/search/code?q=extension:py%20repo:potato3641/algo
>> 확장자가 py고 potato3641사용자의 algo 레포지토리에서 검색
토이프로젝트 2022.10.28 10:00 ~ 2022.10.28 14:00 완료
토이프로젝트 보고서 2022.11.04까지 작성해서 해당 페이지에 README로 작성해놓기
토이프로젝트 추가 태스크) python파일에 a태그 감싸서 해당 폴더 바로 열 수 있게 링크 걸어놓기
(2022.10.29)
(2022.10.30)
(2022.10.31)
보고서 노션으로 한거 readme로 해야함!
(2022.11.01)
모든 태스크 완료
남은것 : ws56
- 포크한거 vscode로 $npm i $npm start해서 볼 수 있음

(today) vue.js
- computed : 계산결과가 바뀌어야 할 때 실행
- methods : 호출될 때 실행
- watch: 대상에 변경이 있으면 실행

_.sample(arr)
> arr중에 하나를 랜덤 반환

v-축약
v-on:xxx
> @xxx
v-bind:xxx
> :xxx

(2022.11.02)
토이프로젝트 보고서까지 완료함!
emit prop에 대해 잘 정리됨
https://whitepro.tistory.com/255
(2022.11.03)
(2022.11.04)
append, appendchild 차이
(2022.11.05)
(2022.11.06)
(2022.11.07)
(2022.11.08)
(2022.11.09)
리팩토링 스타트
커밋, 네이밍, 함수분기
라고하자마자 커밋 바로 배치파일썼는데 솔직히 여긴 잔디찍는데 더 의의를 두는 레포니까 그냥 쓰는게 맞지 않을까싶으므로 algo와 TIL이나 제출에 의의가 있는 레포 등은 모두 배치파일 그대로 쓰고 이외의 것은 배치파일 빼버리기

뷰는 너무 많아서 노션으로 옮겨서 저장함
(2022.11.10)
(2022.11.11)
(2022.11.12)
(2022.11.13)
(2022.11.14)
(2022.11.15)
(2022.11.16)
(2022.11.17)
(2022.11.18)
(2022.11.19) pjt하다가 날짜 넘어감 ㅠ
(2022.11.20)
(2022.11.21)
(2022.11.22)
(2022.11.23)
(2022.11.24)
(2022.11.25)
(2022.11.26)
(2022.11.27)
(2022.11.28)
(2022.11.29)
(2022.11.30)
VUE는 고이 정리해서 모셔두고
JAVA다시 파고 SPRING복구
(2022.12.01)
(2022.12.02)
(2022.12.03)
(2022.12.04)
(2022.12.05)
(2022.12.06)
(2022.12.07)
(2022.12.08) 놀러가서 패스
(2022.12.09)
(2022.12.10)
(2022.12.11) 해이해진다...
(2022.12.12) 헤이!
(2022.12.13)
(2022.12.14)
(2022.12.15)
(2022.12.16)
(2022.12.17)
(2022.12.18)
(2022.12.19)
(2022.12.20)
(2022.12.21)
(2022.12.22)
(2022.12.23)
(2022.12.24)
(2022.12.25)
(2022.12.26)
(2022.12.27)
(2022.12.28)
(2022.12.29)
(2022.12.30)
(2022.12.31)
(2023.01.01)
(2023.01.02)
(2023.01.03)
(2023.01.04)
(2023.01.05)
(2023.01.06)
(2023.01.07)
(2023.01.08)
(2023.01.09)
(2023.01.10)
(2023.01.11)
(2023.01.12)