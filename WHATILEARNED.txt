(2022.07.15)깃허브 배운 것 정리
# 깃허브 사용
git init
> 새 폴더에서 깃허브 사용 지정(master)
git status
> 깃 상태 확인
git config --global --list
> 깃 사용자 정보 확인
git config --global --unset user.email
git config --global --unset user.name
> 깃 사용자 정보 제거
git config --global user.email "이메일"
git config --global user.name "이름"
> 깃 사용자 정보 등록
> 기기가 변경됬다면 자격증명관리자에서 깃허브 정보 제거할 것
git config --global --list
git add a.txt
> 깃 스테이징
git commit -m 'root commit'
> 깃 커밋
git status
git log
> 커밋 로그 확인
git log --oneline
> 커밋 로그 확인 ( 한줄로 )
git checkout 해쉬값
> 해당 커밋까지 버전 보기
git checkout master
> 원래 버전으로 돌아오기
git remote -v
> 현재 커밋 버전 확인
git remote 주소
> 해당 주소의 깃허브에 연결
git push origin master
> 로컬에서 대기중인 커밋을 깃허브로 등록
git clone 주소
> 깃허브 레포지토리를 로컬에 폴더로 가져오기(복사)
git pull origin master
> 깃허브에 갱신된 커밋을 로컬로 가져와 반영하기
touch .gitignore
> 깃 추적을 회피할 파일 명시할 파일
> write file direction
> gitignore.io
.gitkeep
> 형태 유지를 위한 빈 폴더 만드는 방법
> empty folder remain for skeleton
(2022.07.16) 휴식
(2022.07.17) D2 문제 3개를 추가로 품
(2022.07.18)
Alt+Click : 다중커서 활성화
Ctrl D : 단어 드래그하고 쓰면 동일단어 다 드래그
Alt+Shift+under↓ : 지금 줄 밑으로 복사
Ctrl / : 주석전환
f스트링 쓰는 법
f'{변수이름:변수형식'}
f'{변수이름}'
(2022.07.19)
{} set() dict()
[] list()
() tuple()
'''
a=[[1,2],[3,4]]
b=a[:]
a[0][0]=99
print(b)
'''
> [[99,2],[3,4]]
2-demension list에서 외곽만 복사되고 내부는 포인터가 복사되어 가리키는 위치는 같음
(2022.07.20)
value = num if num >= 0 else -num
> value는 num의 절대값
datas = dict(hi=30,bye=60)
for data in datas:
    print(data) # hi \n bye
> dictonary의 키를 호출
for idx, data in enumerate(datas, [start=0]):
    print(idx, data) # 0 hi \n 0 bye
> 인덱스를 자동으로 뽑아줌
> 생략가능한 내장인수 start로 시작값 지정 가능
### List Comprehension
[code for variable in iterable [if conf]]
> 리스트 생성
[number+1 for number in range(1,4)] # [2, 3, 4]
### Dictionary Comprehension
{key: val for variable in iterable [if conf]]
> 딕셔너리 생성
{num: num*3 for num in range(1,4)} # {1: 3, 2: 6, 3: 9}
pass
여백 대신 사용하는 키워드
### function
정의 : def func_name(parameters):
return 으로 두 개 이상의 값을 받을 땐 튜플로
parameter를 여러 개(정확한 갯수 모름) 받고 싶으면 앞에 *붙이기
*parameter 는 받아진 인자를 요소로 하는 tuple 객체로 인식
def asdf(*args): print(args)
asdf(1,2,3,4) # (1, 2, 3, 4)
> 이를 패킹이라고 하고 반대의 경우는 언패킹
a = 'string'
b, *c, d = a
print(b, c, d) # s ['t', 'r', 'i', 'n'] g
> 이렇게 할당 외 요소를 *을 사용하여 하나로 묶을 수 있음
def asdf(**args): print(args)
asdf(hi='hello', bye='hell') # {'hi': 'hello', 'bye': 'hell'}
> **를 붙이면 dictionary취급, 이와 같이 dict()을 쓴거 같이 사용함
> 간단하게 key와 value를 같이 넣는다는 소리
def asdf(*args **argss):
> 이같이 둘 다 쓸 수 있음. argss에 해당하는 부분은 key=value쌍부터 인식
global
> 전역변수를 지역에서 쓰려면 앞에 global을 붙여야함 없으면 syntax error
> 이전에 선언된 적이 없는데 밖에서도 선언된 상태로 쓰고싶을때도 씀
nonlocal
> global이 아닌 현재 로컬 바로 바깥의 변수를 쓸 때 사용함.
> 이전에 선언된 적이 없으면 못 씀
위 두개는 가급적 사용을 지양해야함.. goto같은것들
map
> map(int,input())에서 봤듯, 오른쪽 인자에 int를 적용하여 객체로 반환
> 이 때, 객체는 map클래스임
filter
> filter(odd,nums) map과 비슷하지만 결과가 True가 되는 것만 객체로 반환
> 이 때, 객체는 filter클래스임
zip
> zip(*args) 이며, 복수의 인자들을 받아 해당 인자들을 각각 tuple상태로 모음.
lambda
a = lambda b, c : b+c
print(a(1,2)) # 3
> 간단한 함수 정의는 lambda로 가능, 이름 정의 할 필요가 없음
function 함수 여러 개가 모인 파일 : module
> .py 단위로 구분됨
> import module
> from module import function, var, Class
module 파일 여러 개가 모인 폴더 : package
> from package import module
> from package.module import function, var, Class
package 폴더 여러 개가 모인 묶음 : library
library의 root : pip
$ pip install SomePackage
$ pip uninstall SomePackage
> 어떤 패키지를 설치/삭제하는 방법
$ pip list
$ pip show SomePackage
> 패키지 목록이나 특정 패키지 정보를 보는 방법
모든 폴더에 __init__.py를 만들어 패키지로 인식시킬 수 있음(권장)
$ python -m venv FOLDERNAME
$ deactivate
> 별도의 가상 환경 생성/비활성화(파이썬 기본라이브러리 외 독립적인 공간)
$ source venv/Scripts/activate
> 가상 환경 활성화
(2022.07.21)
pip freeze
> 현재 가상 환경을 key==value로 복사하기 쉽게 정리해줌
pip freeze > requirement.txt
> 정리한걸 requirement.txt 에 내보내줌
pip install -r requirement.txt
> 정리된 내용 토대로 가상환경 설치
(2022.07.22)
dict comprehension
> {key: val for key, val in enumerate(datas)}
(2022.07.23) D2 문제 5개 품
(2022.07.24) D3 문제 5개 품
(2022.07.25) D3 문제 5개 품
(2022.07.26)
'a = dict(zip(range(1,4),[0]*3)'
'{1: 0, 2: 0, 3: 0}'
> zip 사용 방법
`for r in range(1,3):`
`    for c in range(r):`
`        a[r][c],a[c][r] = a[c][r],a[r][c]`
> 정방전치행렬
`list(map(list,zip(*a)))` ####################################################### 짚
> 전치행렬 튜플해결책
바꿀 수 없는건 global로 불러서 해결될 수도 있음
global : 전역변수 선언, 가져오기 둘 다 가능
`set(set(a))`
> 요소는 그대로, id 세탁
(2022.07.27) D3 문제 2개 품
PYTHON OOP
> 모든 것은 객체이자 모든 객체는 특정 타입의 인스턴스
> __str(self)__ : toString()
> __del(self)__ : 단말마
> __init(self, other)__ : 생성자
기타 등등
`@classmethod`
`def cmth(cls)`
> 클래스 메소드
`@function_name`
`def targetmth()`
> 데코레이터 사용 시
`def setmth(original)`
`    def wrapper():`
`        pass`
`    return wrapper`
> 데코레이터 정의 시
`@staticmethod`
> 스태틱 메소드 no cls, no self
PYTHONIC NAMESPACE
> 가장 가까운 것부터 찾는다
`super()`
> 상속시 부모 호출방법
주의 : 오버로딩 없음 우리에겐 가변인자가 있음...
`__variable = 1`
> private member 선언할 때 언더바 두개
`@property`
`def var_name(self)`
> getter
`var_name.setter`
`def var_name(self, new_var)`
> setter
(2022.07.28) D3 12개 품
class docstring
> class 밑에 '''써서 기입하는 class 안내문
> help(class_name)으로 docstring을 호출할 수 있음
!! 인스턴스 생성은 __init__이 실행되어야만 가능
> 메소드 오버라이딩 : 함수를 이름만 가지고 다시 쓰는것 python O
> 메소드 오버로딩 : 클래스 내에 다른 내용의 함수를 쓰는 것 python X
(2022.07.29) ############################################################# API
사용한 api 문서 : https://developers.themoviedb.org/3
사용한 api 주소 : https://api.themoviedb.org/3
사용한 모듈 : requests
URL = 주소
params = {
'key1': 'val1',
'key2': 'val2',
'key3': 'val3'
}
api 받는 방법 : request.get(URL, params=params).json()
나머지는 JSON 지지고 볶기
(2022.07.30) D3 2개 품
(2022.07.31) D3 2개 품
(2022.08.01) D3 1개 품
(2022.08.02) TIL 푸쉬 된 것 실종... 버전 확인하러가야함
(2022.08.03) 
1. 확장
> live server + open in browser 골라서..
> live browser 골라서..
> reset.css : 브라우저 베이스 css 날리기 위한 것.
2. IDE
> ! + tab : html 기본 페이지
> 태그이름 + tab : 태그 기본 세팅
> 태그이름*n + enter : 태그 n개 세팅
> 태그이름.클래스이름*n + enter : 클래스인 태그 n개 세팅
> 태그이름 + mdn  : 태그 백과사전
> <marquee> : 슬라이딩 태그
background-size: contain
background-repeat: no repeat
css는 css파일 가장 밑부터 우선
(2022.08.03) 